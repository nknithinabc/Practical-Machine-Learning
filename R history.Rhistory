myData2 <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!"))
summary(myData2)
myData <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!"))
myData <- read.csv(url(trainUrl), na.strings=c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=myData$something, p=0.6, list=FALSE)
training <- myData[inTrain, ]; test <- myData[-inTrain, ]
dim(training); dim(test)
inTrain <- createDataPartition(y=myData$classe, p=0.6, list=FALSE)
training <- myData[inTrain, ]; test <- myData[-inTrain, ]
dim(training); dim(test)
nearZeroVar(myData, saveMetrics=TRUE)
length(ncol(myData))
ncol(myData)
myNZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
)
trainingV2 <- training[!myNZVvars]
myNZVvars <- names(training) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
trainingV2 <- training[!myNZVvars]
dim(trainingV2)
testingV2 <- testing[!myNZVvars]
training <- myData[inTrain, ]; testing <- myData[-inTrain, ]
testingV2 <- testing[!myNZVvars]
library(caret)
modFitA1 <- train(class ~ ., method="rpart", data=trainingV2)
print(modFitA1$finalModel)
head(trainingV2$class)
head(trainingV2$classe)
head(trainingV2)
modFitA1 <- train(classe ~ ., method="rpart", data=trainingV2)
print(modFitA1$finalModel)
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
getwd()
dir()
png(filename='./figures/PlotA1_v1.png',
width = 480, height = 480, units = "px", pointsize = 12,
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
png(filename='./figures/PlotA1_v1.png',
width = 600, height = 600, units = "px", antialias="cleartype",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
dir()
png(filename='./figures/PlotA1_v1.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
png(filename='./figures/PlotA1v1.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
dir()
setwd("./Course Project/")
png(filename='./figures/PlotA1v1.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
dir()
library(rattle)
fancyRpartPlot(modFitA1$finalModel)
library(rattle)
png(filename='./figures/PlotA1v1.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1$finalModel)
dev.off()
library(rattle)
png(filename='./figures/PlotA1v2.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1$finalModel)
dev.off()
png(filename='./figures/PlotA1v1.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
predictions <- predict(modFitA1, newdata=testingV2)
confusionMatrix(predictions, testingV2$classe)
testingV2 <- testing[!myNZVvars]
predictions <- predict(modFitA1, newdata=testingV2)
confusionMatrix(predictions, testingV2$classe)
dim(testingV2)
dim(trainingV2)
length(testingV2)
length(trainingV2)
predictions
length(predictions)
length(testingV2$classe)
predictions <- predict(modFitA1, newdata=testingV2)
predictions
modFitA1 <- train(classe ~ ., method="rpart", data=trainingV2)
predictions <- predict(modFitA1, newdata=testingV2)
length(predictions)
confusionMatrix(predictions, testingV2$classe)
predictions <- predict(modFitA1, newdata=testingV2, type="classe")
?predict
fancyRpartPlot(modFitA1$finalModel)
fancyRpartPlot(modFitA1)
modFitA1 <- train(classe ~ ., method="rpart", data=trainingV2)
print(modFitA1$finalModel)
head(trainingV2$X)
head(trainingV2)
trainingV2 <- trainingV2[c(-1)]
dim(trainingV2)
testingV2 <- testingV2[c(-1)]
modFitA1 <- train(classe ~ ., method="rpart", data=trainingV2)
print(modFitA1$finalModel)
png(filename='./figures/PlotA1v1.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1$finalModel, uniform=TRUE, main="Classification Tree")
text(modFitA1$finalModel, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
#plot decision tree more fancy:
library(rattle)
png(filename='./figures/PlotA1v2.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1$finalModel)
dev.off()
fancyRpartPlot(modFitA1$finalModel)
predictions <- predict(modFitA1, newdata=testingV2)
confusionMatrix(predictions, testingV2$classe)
length(predictions)
data(iris)
inTrainVb <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
trainingIris <- iris[intrainVb, ]
trainingIris <- iris[inTrainVb, ]
testingIris <- iris[-inTrainVb, ]
modFitIris <- train(Species ~., method="rpart", data=trainingIris)
print(modFitIris$finalModel)
predict(modFitIris, newdata=testingIris)
predictionsIris <- predict(modFitIris, newdata=testingIris)
confusionMatrix(predictionsIris, testingIris$type)
predictions <- predict(modFitA1, newdata=testingV2, type="class")
confusionMatrix(predictions, testingV2$classe)
library(rpart)
modFitA1 <- rpart(classe ~ ., data=trainingV2, method="class")
print(modFitA1$finalModel)
fancyRpartPlot(modFitA1$finalModel)
fancyRpartPlot(modFitA1)
print(modFitA1)
png(filename='./figures/PlotA1v12.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1, uniform=TRUE, main="Classification Tree")
text(modFitA1, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
#plot decision tree more fancy:
library(rattle)
png(filename='./figures/PlotA1v22.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1$finalModel)
dev.off()
png(filename='./figures/PlotA1v22.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1)
dev.off()
predictionsA <- predict(modFitA1, testingV2, type = "class")
confusionMatrix(predictions, testingV2$classe)
confusionMatrix(predictionsA, testingV2$classe)
predictionsA1 <- predict(modFitA1, testingV2, type = "class")
predictionsA2 <- predict(modFitA1, validation, type = "class")
validation <- read.csv(url(testUrl))
predictionsA2 <- predict(modFitA1, validation, type = "class")
validationV2 <- validation[!myNZVvars]
validationV2 <- validationV2[c(-1)]
predictionsA2 <- predict(modFitA1, validationV2, type = "class")
confusionMatrix(predictionsA2, validatoinV2$classe)
predictionsA2 <- predict(modFitA1, validationV2, type = "class")
predictionsA2 <- predict(modFitA1, validationV2, type = "class")
length(validationv2)
length(validationV2)
predictionsA2 <- predict(modFitA1, validationV2, type = "class")
validationV2 <- validation[!myNZVvars]
validationV2 <- validationV2[c(-1)]
head(validationV2)
head(validationV2$classe)
head(validation)
head(validation, n=10)
head(validation, n=3)
length(validationV2)
validationV2 <- validationV2[c(-length(validationV2))]
head(validationV2, n=3)
predictionsA2 <- predict(modFitA1, validationV2, type = "class")
str(validationV2)
validation <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
validationV2 <- validation[!myNZVvars]
validationV2 <- validationV2[c(-1)]
validationV2 <- validationV2[c(-length(validationV2))]
class(validationV2[,1])
for (i in 1:length(testingV2) ) {
trainingClassVector <- append(class(testingV2[,i]), i)
}
trainingClassVector
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, class(testingV2[,i]) )
}
head(trainingV2ClassVector)
trainingV2ClassVector
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, class(testingV2[,i]) )
}
trainingV2ClassVector
class(testingV2[,1])
class(testingV2[,2])
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, i )
}
trainingV2ClassVector
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, i )
}
trainingV2ClassVector <- c(1:length(trainingV2))
head(trainingV2ClassVector)
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, i )
}
head(trainingV2ClassVector)
for (i in 1:length(testingV2) ) {
trainingV2ClassVector <- append(trainingClassVector, class(testingV2[,i]) )
}
length(testingV2)
for (i in 1:length(testingV2) ) {
trainingV2ClassVector[i] <- class(testingV2[,i]) )
}
for (i in 1:length(testingV2) ) {
trainingV2ClassVector[i] <- class(testingV2[,i])
}
length(trainingV2ClassVector)
trainingV2[,2]
head(trainingV2[,2], n=1)
colnames(trainingV2[,2])
colname(trainingV2[,2])
names(trainingV2[,2])
names(trainingV2)
names(validationV2)
trainV2Names <- names(trainingV2)
trainV2Names
names(trainingV2[1])
names(trainingV2[2])
validationV3 <- validationV2
for (i in 1:length(testingV2) ) {
for(j in 1:length(validationV3)) {
if( length( grep(names(trainingV2[i]), names(validationV3)[j]) ) ==1)  {
class(validationV3[j]) <- class(trainingV2[i])
}
}
}
cla
class(trainingV2)
identical(class(colnames(validationV3)), class(colnames(trainingV2)) )
nrow(validationV3)
?rbind
predictionsA2 <- predict(modFitA1, validationV3, type = "class")
str(validationV3)
str(testingV2)
identical(class(colnames(validationV3)), class(colnames(validationV2)) )
colnames(validationV3)
for(i in 1:length(validationV3)) {
if(class(validationV3[,i]) == "charactor") {
as.Factor(validationV3[,i])
}
}
str(validationV3)
trainingV45 <- trainingV2[100, -59]
dim(trainingV45)
modFitB1 <- randomForest(classe~.,data=trainingV2, ntree=2000)
library(randomForest)
modFitB1 <- randomForest(classe~.,data=trainingV2)
modFitB1 <- randomForest(classe ~., data=trainingV2)
modFitB1 <- randomForest(classe ~. , data=trainingV2)
head(trainingV2)
modFitB1 <- randomForest(classe ~. , data=trainingV2)
sum((colSums(!is.na(trainingV2[,-ncol(trainingV2)]))
)
)
ncol(trainingV2)
trainingV2[, -99]
head(trainingV2[,-1])
head(trainingV2[,-2])
head(trainingV2[,-3])
head(trainingV2)
summary(trainingV2)
any(is.na(trainingV2))
colSums(is.na(trainingV2))
colSums(is.na(trainingV2$max_roll_belt))
trainingV3 <- trainingV2
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .6 *nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
dim(trainingV3)
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .7 *nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .8 *nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) == nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .5*nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .3*nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .1*nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) >= .01*nrow(trainingV2) ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , c(-i)] #Remove that column
}
}
colSums(is.na(trainingV3))
sum(is.na(trainingV3$11534))/nrow(trainingV3)
sum(is.na(trainingV3$stddev_yaw_dumbbell))/nrow(trainingV3)
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) /nrow(trainingV2) >= .6 ) { #if nº NAs > 60% of total observations
trainingV3 <- trainingV2[ , -i] #Remove that column
}
}
dim(trainingV3)
sum(is.na(trainingV3$stddev_yaw_dumbbell))/nrow(trainingV3)
trainingV3 <- trainingV2[, -1]
head(trainignV3)
head(trainingV3)
trainingV3 <- trainingV2[, -2]
head(trainingV3)
names(trainingV2[,1])
name(trainingV2[,1])
names(trainingV2[1])
trainingV3 <- trainingV3[,-names(trainingV2[,3])]
trainingV3 <- trainingV3[,-c(names(trainingV2[,3]))]
trainingV3 <- trainingV2
for(i in 1:length(trainingV2)) { #for every column in the training dataset
if( sum( is.na( trainingV2[, i] ) ) /nrow(trainingV2) >= .6 ) { #if nº NAs > 60% of total observations
for(j in 1:length(trainingV3)) {
if( length( grep(names(trainingV2[i]), names(trainingV3)[j]) ) ==1)  { #if the columns are the same:
trainingV3 <- trainingV3[ , -j] #Remove that column
}
}
}
}
dim(trainingV3)
colSums(is.na(trainingV3))
any(is.na(trainingV3))
testingV3 <- testingV2
for(i in 1:length(testingV2)) { #for every column in the training dataset
if( sum( is.na( testingV2[, i] ) ) /nrow(testingV2) >= .6 ) { #if nº NAs > 60% of total observations
for(j in 1:length(testingV3)) {
if( length( grep(names(testingV2[i]), names(testingV3)[j]) ) ==1)  { #if the columns are the same:
testingV3 <- testingV3[ , -j] #Remove that column
}
}
}
}
dim(testingV3)
validation <- read.csv(url(testUrl), na.strings=c("NA","#DIV/0!",""))
validationV2 <- validation[!myNZVvars]
validationV2 <- validationV2[c(-1)]
validationV2 <- validationV2[c(-length(validationV2))]
validationV3 <- validationV2
for(i in 1:length(validationV2)) { #for every column in the real Testing dataset, that I called Validation set
if( sum( is.na( validationV2[, i] ) ) /nrow(validationV2) >= .6 ) { #if nº NAs > 60% of total observations
for(j in 1:length(validationV3)) {
if( length( grep(names(validationV2[i]), names(validationV3)[j]) ) ==1)  { #if the columns are the same:
validationV3 <- validationV3[ , -j] #Remove that column
}
}
}
}
dim(validationV3)
library(caret)
library(rpart)
set.seed(12345)
validationV4 <- validationV3 #just to make sure I don't mess up anything..
for (i in 1:length(testingV2) ) {
for(j in 1:length(validationV3)) {
if( length( grep(names(trainingV2[i]), names(validationV3)[j]) ) ==1)  {
class(validationV3[j]) <- class(trainingV2[i])
}
}
}
for(i in 1:length(validationV3)) {
if(class(validationV3[,i]) == "charactor") {
as.Factor(validationV3[,i])
}
}
modFitA1 <- rpart(classe ~ ., data=trainingV3, method="class")
print(modFitA1)
#plot tree:
png(filename='./figures/PlotA1v12.png',
width = 600, height = 600, units = "px",
bg = "white")
plot(modFitA1, uniform=TRUE, main="Classification Tree")
text(modFitA1, use.n=TRUE, all=TRUE, cex=.8)
dev.off()
#plot decision tree more fancy:
library(rattle)
png(filename='./figures/PlotA1v22.png',
width = 600, height = 600, units = "px",
bg = "white")
fancyRpartPlot(modFitA1)
dev.off()
fancyRpartPlot(modFitA1)
getwd()
dir()
predictionsA1 <- predict(modFitA1, testingV3, type = "class")
confusionMatrix(predictionsA1, testingV3$classe)
library(randomForest)
modFitB1 <- randomForest(classe ~. , data=trainingV3)
predictionsB1 <- predict(modFitB1, testingV3, type = "class")
confusionMatrix(predictionsB1, testingV3$classe)
predictionsA2 <- predict(modFitA1, validationV4, type = "class")
predictionsB1 <- predict(modFitB1, validationV4, type = "class")
modFitB1 <- randomForest(classe ~. , data=trainingV3)
predictionsB1 <- predict(modFitB1, testingV3, type = "class")
predictionsB1 <- predict(modFitB1, validationV4, type = "class")
validationV4 <- validationV3 #just to make sure I don't mess up anything..
for (i in 1:length(testingV2) ) {
for(j in 1:length(validationV3)) {
if( length( grep(names(trainingV2[i]), names(validationV3)[j]) ) ==1)  {
class(validationV4[j]) <- class(trainingV3[i])
}
}
}
for(i in 1:length(validationV4)) {
if(class(validationV4[,i]) == "charactor") {
as.Factor(validationV4[,i])
}
}
validationV4 <- validationV3 #just to make sure I don't mess up anything..
for (i in 1:length(validationV3) ) {
for(j in 1:length(validationV4)) {
if( length( grep(names(validationV3[i]), names(validationV4)[j]) ) ==1)  {
class(validationV4[j]) <- class(validationV3[i])
}
}
}
for(i in 1:length(validationV4)) {
if(class(validationV4[,i]) == "charactor") {
as.Factor(validationV4[,i])
}
}
predictionsB2 <- predict(modFitB1, validationV4, type = "class")
dim(trainingV3)
validationV5 <- rbind(trainingV3[2, -58] , validationV4)
head(trainingV3[2, -58])
head(ValidationV5)
head(validationV5)
head(validationV4)
validationV5 <- validationV5[-1,]
head(validationV5)
predictionsB2 <- predict(modFitB1, validationV5, type = "class")
